#!/usr/bin/env bash
# install_pubkey.sh
# Usage:
#   sudo ./install_pubkey.sh <URL> [--user username] [--mode append|replace] [--backup]
# Examples:
#   sudo ./install_pubkey.sh "https://api.pictureiran1.ir/t/key.pub"
#   sudo ./install_pubkey.sh "https://api.pictureiran1.ir/t/key.pub" --user root --mode replace --backup

set -euo pipefail

URL="${1:-}"
TARGET_USER="root"
MODE="append"   # append or replace
DO_BACKUP=0

if [[ -z "$URL" || "$URL" =~ ^- ]]; then
  echo "Usage: $0 <url-to-public-key> [--user username] [--mode append|replace] [--backup]"
  exit 2
fi

shift || true
while (( "$#" )); do
  case "$1" in
    --user) TARGET_USER="${2:-}"; shift 2 ;;
    --mode) MODE="${2:-}"; shift 2 ;;
    --backup) DO_BACKUP=1; shift ;;
    --help|-h) echo "Usage: $0 <url> [--user username] [--mode append|replace] [--backup]"; exit 0 ;;
    *) echo "Unknown option: $1"; exit 2 ;;
  esac
done

if [[ "$MODE" != "append" && "$MODE" != "replace" ]]; then
  echo "Invalid mode: $MODE. Use append or replace."
  exit 2
fi

# Resolve target user's home dir and uid/gid
if ! id "$TARGET_USER" >/dev/null 2>&1; then
  echo "User '$TARGET_USER' does not exist on this system."
  exit 3
fi

USER_HOME=$(eval echo "~${TARGET_USER}")
SSH_DIR="${USER_HOME}/.ssh"
AUTH_FILE="${SSH_DIR}/authorized_keys"
TIMESTAMP=$(date +"%Y%m%dT%H%M%S")
TMPFILE="$(mktemp /tmp/pubkey.XXXXXX)"

cleanup() {
  rm -f "$TMPFILE"
}
trap cleanup EXIT

echo "Downloading public key from: $URL"
# try curl then wget
if command -v curl >/dev/null 2>&1; then
  curl -fsSL "$URL" -o "$TMPFILE" || { echo "curl failed to download key"; exit 4; }
elif command -v wget >/dev/null 2>&1; then
  wget -qO "$TMPFILE" "$URL" || { echo "wget failed to download key"; exit 4; }
else
  echo "Neither curl nor wget is installed. Install one of them."
  exit 5
fi

# quick sanity check: file should look like an ssh public key (type key comment)
FIRST_LINE=$(sed -n '1p' "$TMPFILE" || true)
if [[ ! "$FIRST_LINE" =~ ^(ssh-(rsa|dss|ed25519|ecdsa)|ecdsa-sha2-nistp(256|384|521))\  ]]; then
  echo "Downloaded file doesn't look like an OpenSSH public key (first line: $FIRST_LINE)"
  echo "Contents (first 2 lines):"
  sed -n '1,2p' "$TMPFILE"
  echo "Aborting."
  exit 6
fi

# compute fingerprint for user confirmation (shows md5 or SHA256 depending on ssh-keygen)
if command -v ssh-keygen >/dev/null 2>&1; then
  echo "Public key fingerprint:"
  ssh-keygen -lf "$TMPFILE" || true
else
  echo "ssh-keygen not found; cannot show fingerprint. Proceeding anyway."
fi

# create .ssh dir if needed
echo "Ensuring $SSH_DIR exists and perms are correct"
mkdir -p "$SSH_DIR"
chown "$TARGET_USER":"$TARGET_USER" "$SSH_DIR"
chmod 700 "$SSH_DIR"

# backup if requested and file exists
if [[ -f "$AUTH_FILE" && $DO_BACKUP -eq 1 ]]; then
  BACKUP_FILE="${AUTH_FILE}.bak.${TIMESTAMP}"
  echo "Backing up existing authorized_keys -> $BACKUP_FILE"
  cp -a "$AUTH_FILE" "$BACKUP_FILE"
  chown "$TARGET_USER":"$TARGET_USER" "$BACKUP_FILE"
  chmod 600 "$BACKUP_FILE"
fi

# add or replace
if [[ "$MODE" == "replace" ]]; then
  echo "Replacing $AUTH_FILE with downloaded key"
  cat "$TMPFILE" > "$AUTH_FILE"
else
  echo "Appending downloaded key to $AUTH_FILE (duplicates not checked)"
  cat "$TMPFILE" >> "$AUTH_FILE"
fi

# normalize permissions & ownership
chown "$TARGET_USER":"$TARGET_USER" "$AUTH_FILE"
chmod 600 "$AUTH_FILE"

echo "Done. Final authorized_keys perms:"
ls -l "$AUTH_FILE"

echo "If you expect to SSH from a client machine, make sure you possess the corresponding PRIVATE key."
echo "To debug from your client machine, run: ssh -vvv ${TARGET_USER}@$(hostname -I | awk '{print $1}')"
echo "Or: ssh -vvv ${TARGET_USER}@<server-ip>"

exit 0
